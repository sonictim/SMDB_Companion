name: "publish"

# Updated workflow with code signing, credentials, and deployment to website
on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "x86_64-apple-darwin"
          - platform: "windows-latest"
            args: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive # This ensures submodules are checked out

      - name: Update submodules to latest version
        run: |
          git submodule update --remote --recursive
          # Check what version of FFCodex we're using (for debugging)
          cd src-tauri/submodules/FFCodex && git rev-parse HEAD && cd ../../..

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.args }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      # Import Apple certificate for macOS builds
      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12

      - name: Install tauri-cli
        run: cargo install tauri-cli

      # Build for macOS with code signing
      - name: Build macOS with signing
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          cd src-tauri
          cargo tauri build --target ${{ matrix.args }}

      # Setup Windows build environment
      - name: Setup Windows build environment
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Setting up Windows build environment..."
          # Ensure Visual C++ runtime libraries are available
          # GitHub Actions windows runners should already have these installed
          # but we can verify with a specific Visual Studio environment setup
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" || echo "Visual Studio environment setup already done"
          echo "RUSTFLAGS=-C link-args=/NODEFAULTLIB:libcmt" >> $GITHUB_ENV

      # Build for Windows with Visual C++ Runtime setup
      - name: Build Windows
        if: matrix.platform == 'windows-latest'
        env:
          RUSTFLAGS: "-C link-args=/NODEFAULTLIB:libcmt"
        run: |
          cd src-tauri
          cargo tauri build --target ${{ matrix.args }}

      # Notarize macOS app
      - name: Notarize macOS App
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          APP_PATH="src-tauri/target/${{ matrix.args }}/release/bundle/macos/SMDB Companion.app"
          echo "Notarizing app at path: $APP_PATH"
          xcrun notarytool submit "$APP_PATH" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_PASSWORD" \
            --wait

      - name: Prepare files for website deployment
        if: success()
        run: |
          echo "Preparing files for deployment to website..."

          # Get app version from tauri.conf.json (OS-specific commands)
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            APP_VERSION=$(grep -o '"version": "[^"]*"' ./src-tauri/tauri.conf.json | cut -d'"' -f4)
          else
            APP_VERSION=$(powershell -Command "(Get-Content ./src-tauri/tauri.conf.json | ConvertFrom-Json).version")
          fi

          echo "App version: $APP_VERSION"
          mkdir -p "deployment/beta/$APP_VERSION"

          # For macOS builds (DMG files)
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            # Copy DMG files for arm64
            if [[ "${{ matrix.args }}" == "aarch64-apple-darwin" ]]; then
              find ./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg -name "*.dmg" -exec cp {} "deployment/beta/$APP_VERSION/" \;
              # Rename with architecture suffix
              cd "deployment/beta/$APP_VERSION/"
              for file in *.dmg; do
                if [[ -f "$file" ]]; then
                  base_name=$(basename "$file" .dmg)
                  mv "$file" "${base_name}_arm64.dmg"
                fi
              done
              cd ../../../
            fi
            
            # Copy DMG files for x86_64
            if [[ "${{ matrix.args }}" == "x86_64-apple-darwin" ]]; then
              find ./src-tauri/target/x86_64-apple-darwin/release/bundle/dmg -name "*.dmg" -exec cp {} "deployment/beta/$APP_VERSION/" \;
              # Rename with architecture suffix
              cd "deployment/beta/$APP_VERSION/"
              for file in *.dmg; do
                if [[ -f "$file" ]]; then
                  base_name=$(basename "$file" .dmg)
                  mv "$file" "${base_name}_x86_64.dmg"
                fi
              done
              cd ../../../
            fi
            
            # Create version.txt file with date
            echo "$APP_VERSION" > "deployment/beta/$APP_VERSION/version.txt"
            echo "$(date '+%Y-%m-%d')" >> "deployment/beta/$APP_VERSION/version.txt"
          fi

          # For Windows builds (MSI and EXE installers)
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            powershell -Command "New-Item -ItemType Directory -Path './deployment/beta/$APP_VERSION' -Force"
            powershell -Command "Get-ChildItem -Path './src-tauri/target/release/bundle/msi/*.msi', './src-tauri/target/release/bundle/nsis/*.exe' -ErrorAction SilentlyContinue | Copy-Item -Destination './deployment/beta/$APP_VERSION/'"
            # Create version.txt file on Windows
            powershell -Command "Set-Content -Path './deployment/beta/$APP_VERSION/version.txt' -Value '$APP_VERSION'"
            powershell -Command "Add-Content -Path './deployment/beta/$APP_VERSION/version.txt' -Value (Get-Date -Format 'yyyy-MM-dd')"
          fi

          # List prepared files
          echo "Files prepared for deployment:"
          ls -la "deployment/beta/$APP_VERSION/"

      - name: Deploy to website via SSH
        if: success()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "deployment/beta/*"
          target: "${{ secrets.REMOTE_DEPLOY_PATH }}"
          strip_components: 1

      - name: Create GitHub Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: "SMDB Companion v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
