import "./chunk-GT6UJDK6.js";
import {
  add_locations,
  append_styles,
  assign,
  bind_element_size,
  bind_this,
  check_target,
  cleanup_styles,
  each,
  hmr,
  init,
  legacy_api,
  onMount,
  prop,
  set_class,
  set_style,
  slot,
  validate_each_keys
} from "./chunk-55ZHHA7D.js";
import "./chunk-5DRW3NTA.js";
import {
  append,
  template,
  text
} from "./chunk-PJCSYG2C.js";
import {
  FILENAME,
  HMR,
  child,
  deep_read_state,
  event,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mutable_source,
  pop,
  push,
  reset,
  set,
  template_effect,
  tick
} from "./chunk-3EY2DBC7.js";
import "./chunk-YDPHFCZX.js";
import "./chunk-XBJPAMYZ.js";
import "./chunk-3F74YA3Z.js";

// node_modules/.pnpm/svelte-virtual-list@3.0.1/node_modules/svelte-virtual-list/VirtualList.svelte
VirtualList[FILENAME] = "node_modules/.pnpm/svelte-virtual-list@3.0.1/node_modules/svelte-virtual-list/VirtualList.svelte";
var refreshAction;
function notifyRefresh() {
  refreshAction();
}
var root_1 = add_locations(template(`<svelte-virtual-list-row><!></svelte-virtual-list-row>`, 2), VirtualList[FILENAME], [[172, 3]]);
var root = add_locations(template(`<svelte-virtual-list-viewport><svelte-virtual-list-contents></svelte-virtual-list-contents></svelte-virtual-list-viewport>`, 2), VirtualList[FILENAME], [[161, 0, [[167, 1]]]]);
var $$css = {
  hash: "s-R5ZC3sM2nYh5",
  code: "\n	svelte-virtual-list-viewport.s-R5ZC3sM2nYh5 {\n		position: relative;\n		overflow-y: auto;\n		-webkit-overflow-scrolling:touch;\n		display: block;\n	}\n\n	svelte-virtual-list-contents.s-R5ZC3sM2nYh5, svelte-virtual-list-row.s-R5ZC3sM2nYh5 {\n		display: block;\n	}\n\n	svelte-virtual-list-row.s-R5ZC3sM2nYh5 {\n		overflow: hidden;\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlydHVhbExpc3Quc3ZlbHRlIiwibWFwcGluZ3MiOiI7QUFnSkEsQ0FBQywyQ0FBNEIsQ0FBQztBQUM5QixFQUFFLGtCQUFrQjtBQUNwQixFQUFFLGdCQUFnQjtBQUNsQixFQUFFLGdDQUFnQztBQUNsQyxFQUFFLGNBQWM7QUFDaEI7O0FBRUEsQ0FBQywyQ0FBNEIsRUFBRSxzQ0FBdUIsQ0FBQztBQUN2RCxFQUFFLGNBQWM7QUFDaEI7O0FBRUEsQ0FBQyxzQ0FBdUIsQ0FBQztBQUN6QixFQUFFLGdCQUFnQjtBQUNsQiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVmlydHVhbExpc3Quc3ZlbHRlIl19 */"
};
function VirtualList($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VirtualList);
  append_styles($$anchor, $$css);
  let items = prop($$props, "items", 8);
  let height = prop($$props, "height", 8, "100%");
  let itemHeight = prop($$props, "itemHeight", 8, void 0);
  let foo;
  let start = prop($$props, "start", 12, 0);
  let end = prop($$props, "end", 12, 0);
  let height_map = [];
  let rows;
  let viewport = mutable_source();
  let contents = mutable_source();
  let viewport_height = mutable_source(0);
  let visible = mutable_source();
  let mounted = mutable_source();
  let top = mutable_source(0);
  let bottom = mutable_source(0);
  let average_height;
  async function refresh(items2, viewport_height2, itemHeight2) {
    const { scrollTop } = get(viewport);
    await tick();
    let content_height = get(top) - scrollTop;
    let i = start();
    while (content_height < viewport_height2 && i < items2.length) {
      let row = rows[i - start()];
      if (!row) {
        end(i + 1);
        await tick();
        row = rows[i - start()];
      }
      const row_height = assign(height_map, i, itemHeight2 || row.offsetHeight, "node_modules/​.pnpm/​svelte-virtual-list@3.0.1/​node_modules/​svelte-virtual-list/​VirtualList.svelte:59:22");
      content_height += row_height;
      i += 1;
    }
    end(i);
    const remaining = items2.length - end();
    average_height = (get(top) + content_height) / end();
    set(bottom, remaining * average_height);
    height_map.length = items2.length;
  }
  async function handle_scroll() {
    const { scrollTop } = get(viewport);
    const old_start = start();
    for (let v = 0; v < rows.length; v += 1) {
      height_map[start() + v] = itemHeight() || rows[v].offsetHeight;
    }
    let i = 0;
    let y = 0;
    while (i < items().length) {
      const row_height = height_map[i] || average_height;
      if (y + row_height > scrollTop) {
        start(i);
        set(top, y);
        break;
      }
      y += row_height;
      i += 1;
    }
    while (i < items().length) {
      y += height_map[i] || average_height;
      i += 1;
      if (y > scrollTop + get(viewport_height)) break;
    }
    end(i);
    const remaining = items().length - end();
    average_height = y / end();
    while (i < items().length) height_map[i++] = average_height;
    set(bottom, remaining * average_height);
    if (start() < old_start) {
      await tick();
      let expected_height = 0;
      let actual_height = 0;
      for (let i2 = start(); i2 < old_start; i2 += 1) {
        if (rows[i2 - start()]) {
          expected_height += height_map[i2];
          actual_height += itemHeight() || rows[i2 - start()].offsetHeight;
        }
      }
      const d = actual_height - expected_height;
      get(viewport).scrollTo(0, scrollTop + d);
    }
  }
  refreshAction = () => refresh(items(), get(viewport_height), itemHeight());
  onMount(() => {
    rows = get(contents).getElementsByTagName("svelte-virtual-list-row");
    set(mounted, true);
  });
  legacy_pre_effect(
    () => (deep_read_state(items()), deep_read_state(start()), deep_read_state(end())),
    () => {
      set(visible, items().slice(start(), end()).map((data, i) => {
        return { index: i + start(), data };
      }));
    }
  );
  legacy_pre_effect(
    () => (get(mounted), deep_read_state(items()), get(viewport_height), deep_read_state(itemHeight())),
    () => {
      if (get(mounted)) refresh(items(), get(viewport_height), itemHeight());
    }
  );
  legacy_pre_effect_reset();
  init();
  var svelte_virtual_list_viewport = root();
  set_class(svelte_virtual_list_viewport, 1, "s-R5ZC3sM2nYh5");
  var svelte_virtual_list_contents = child(svelte_virtual_list_viewport);
  set_class(svelte_virtual_list_contents, 1, "s-R5ZC3sM2nYh5");
  validate_each_keys(() => get(visible), (row) => row.index);
  each(svelte_virtual_list_contents, 5, () => get(visible), (row) => row.index, ($$anchor2, row) => {
    var svelte_virtual_list_row = root_1();
    set_class(svelte_virtual_list_row, 1, "s-R5ZC3sM2nYh5");
    var node = child(svelte_virtual_list_row);
    slot(
      node,
      $$props,
      "default",
      {
        get item() {
          return get(row).data;
        }
      },
      ($$anchor3) => {
        var text2 = text("Missing template");
        append($$anchor3, text2);
      }
    );
    reset(svelte_virtual_list_row);
    append($$anchor2, svelte_virtual_list_row);
  });
  reset(svelte_virtual_list_contents);
  bind_this(svelte_virtual_list_contents, ($$value) => set(contents, $$value), () => get(contents));
  reset(svelte_virtual_list_viewport);
  bind_this(svelte_virtual_list_viewport, ($$value) => set(viewport, $$value), () => get(viewport));
  template_effect(() => {
    set_style(svelte_virtual_list_viewport, `height: ${height() ?? ""};`);
    set_style(svelte_virtual_list_contents, `padding-top: ${get(top) ?? ""}px; padding-bottom: ${get(bottom) ?? ""}px;`);
  });
  bind_element_size(svelte_virtual_list_viewport, "offsetHeight", ($$value) => set(viewport_height, $$value));
  event("scroll", svelte_virtual_list_viewport, handle_scroll);
  append($$anchor, svelte_virtual_list_viewport);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VirtualList = hmr(VirtualList, () => VirtualList[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-R5ZC3sM2nYh5");
    module.default[HMR].source = VirtualList[HMR].source;
    set(VirtualList[HMR].source, module.default[HMR].original);
  });
}
var VirtualList_default = VirtualList;
export {
  VirtualList_default as default,
  notifyRefresh
};
//# sourceMappingURL=svelte-virtual-list.js.map
